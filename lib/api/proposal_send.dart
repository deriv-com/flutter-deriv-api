/// Autogenerated from flutter_deriv_api|lib/api/proposal_send.json
import 'dart:async';
import 'dart:convert';
import 'package:json_annotation/json_annotation.dart';

part 'proposal_send.g.dart';

@JsonSerializable(nullable: false, fieldRename: FieldRename.snake)
class ProposalRequest {
  ProposalRequest();
  factory ProposalRequest.fromJson(Map<String, dynamic> json) =>
      _$ProposalRequestFromJson(json);
  Map<String, dynamic> toJson() => _$ProposalRequestToJson(this);

  // Properties
  /// Proposed contract payout or stake, or multiplier (for lookbacks).
  num amount;

  /// Barrier for the contract (or last digit prediction for digit contracts). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Volatility Indices as they support both relative and absolute barriers. Not needed for lookbacks.
  String barrier;

  /// Low barrier for the contract (for contracts with two barriers). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Volatility Indices as they support both relative and absolute barriers. Not needed for lookbacks.
  String barrier2;

  /// Indicates whether amount is 'payout' or 'stake'.
  String basis;

  /// The proposed contract type
  String contractType;

  /// This can only be the account-holder's currency (obtained from payout_currencies call).
  String currency;

  /// Epoch value of the expiry time of the contract. Either date_expiry or duration is required.
  int dateExpiry;

  /// [Optional] Indicates epoch value of the starting time of the contract. If left empty, the start time of the contract is now.
  int dateStart;

  /// Duration quantity. Either date_expiry or duration is required.
  int duration;

  /// [Optional] Duration unit - s(seconds), m(minutes), h(hours), d(days), t(ticks).
  String durationUnit;

  /// The multiplier for non-binary options. E.g. lookbacks.
  num multiplier;

  /// [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
  Map<String, dynamic> passthrough;

  /// The product type.
  String productType;

  /// Must be 1
  int proposal;

  /// [Optional] Used to map request to response.
  int reqId;

  /// The tick that is predicted to have the highest/lowest value - for tickhigh and ticklow contracts.
  int selectedTick;

  /// [Optional] 1 - to initiate a realtime stream of prices. Note that tick trades (without a user-defined barrier), digit trades and less than 24 hours at-the-money contracts for the following underlying symbols are not streamed: R_10, R_25, R_50, R_75, R_100, RDBULL, RDBEAR (this is because their price is constant).
  int subscribe;

  /// The short symbol name (obtained from active_symbols call).
  String symbol;

  /// Required only for multi-barrier trading. Defines the epoch value of the trading period start time.
  int tradingPeriodStart;

  // @override
  // String toString() => name;
  static bool _fromInteger(int v) => (v != 0);
  static int _fromBoolean(bool v) => v ? 1 : 0;
}
