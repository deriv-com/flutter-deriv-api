///
class LandingCompanyDetailModel {
  /// Constructor
  LandingCompanyDetailModel({
    this.address,
    this.changeableFields,
    this.country,
    this.currencyConfig,
    this.hasRealityCheck,
    this.legalAllowedContractCategories,
    this.legalAllowedCurrencies,
    this.legalAllowedMarkets,
    this.legalDefaultCurrency,
    this.name,
    this.requirements,
    this.shortcode,
  });

  /// Instance from JSON
  factory LandingCompanyDetailModel.fromJson(Map<String, dynamic> json) =>
      LandingCompanyDetailModel(
        address: json['address'],
        changeableFields: json['changeable_fields'],
        country: json['country'],
        currencyConfig: json['currency_config'] != null
            ? CurrencyConfig.fromJson(json['currency_config'])
            : null,
        hasRealityCheck: json['has_reality_check'],
        legalAllowedContractCategories:
            json['legal_allowed_contract_categories'] != null
                ? json['legal_allowed_contract_categories']
                    .map<String>((dynamic entry) => entry)
                    .toList()
                : null,
        legalAllowedCurrencies: json['legal_allowed_currencies'] != null
            ? json['legal_allowed_currencies']
                .map<String>((dynamic entry) => entry)
                .toList()
            : null,
        legalAllowedMarkets: json['legal_allowed_markets'] != null
            ? json['legal_allowed_markets']
                .map<String>((dynamic entry) => entry)
                .toList()
            : null,
        legalDefaultCurrency: json['legal_default_currency'],
        name: json['name'],
        requirements: json['requirements'],
        shortcode: json['shortcode'],
      );

  // Properties
  /// Landing Company address.
  final String address;

  /// Special conditions for changing sensitive fields
  final Map<String, dynamic> changeableFields;

  /// Landing Company country.
  final String country;

  /// The configuration of each currency.
  final CurrencyConfig currencyConfig;

  /// Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.
  final int hasRealityCheck;

  /// Allowed contract types for this Landing Company
  final List<String> legalAllowedContractCategories;

  /// Allowable currencies for accounts with this Landing Company.
  final List<String> legalAllowedCurrencies;

  /// Allowed markets for this Landing Company
  final List<String> legalAllowedMarkets;

  /// Default currency of client accounts with this Landing Company.
  final String legalDefaultCurrency;

  /// Landing Company name.
  final String name;

  /// Legal requirements for the given Landing Company.
  final Map<String, dynamic> requirements;

  /// Landing Company shortcode.
  final String shortcode;

  /// ToJson
  LandingCompanyDetailModel copyWith({
    String address,
    Map<String, dynamic> changeableFields,
    String country,
    CurrencyConfig currencyConfig,
    int hasRealityCheck,
    List<String> legalAllowedContractCategories,
    List<String> legalAllowedCurrencies,
    List<String> legalAllowedMarkets,
    String legalDefaultCurrency,
    String name,
    Map<String, dynamic> requirements,
    String shortcode,
  }) =>
      LandingCompanyDetailModel(
        address: address ?? this.address,
        changeableFields: changeableFields ?? this.changeableFields,
        country: country ?? this.country,
        currencyConfig: currencyConfig ?? this.currencyConfig,
        hasRealityCheck: hasRealityCheck ?? this.hasRealityCheck,
        legalAllowedContractCategories: legalAllowedContractCategories ??
            this.legalAllowedContractCategories,
        legalAllowedCurrencies:
            legalAllowedCurrencies ?? this.legalAllowedCurrencies,
        legalAllowedMarkets: legalAllowedMarkets ?? this.legalAllowedMarkets,
        legalDefaultCurrency: legalDefaultCurrency ?? this.legalDefaultCurrency,
        name: name ?? this.name,
        requirements: requirements ?? this.requirements,
        shortcode: shortcode ?? this.shortcode,
      );
}

/// Autogenerated from CurrencyConfig

///
class CurrencyConfig {
  /// Constructor
  CurrencyConfig({this.market});

  /// Instance from JSON
  factory CurrencyConfig.fromJson(
    Map<String, dynamic> json,
  ) =>
      CurrencyConfig(
        market: json['market'] != null ? Market.fromJson(json) : null,
      );

  // Properties
  /// Name of market.
  final Market market;

  /// ToJson
  CurrencyConfig copyWith({
    Market market,
  }) =>
      CurrencyConfig(market: market ?? this.market);
}

/// Autogenerated from Market

///
class Market {
  /// Constructor
  Market({this.currency});

  /// Instance from JSON
  factory Market.fromJson(
    Map<String, dynamic> json,
  ) =>
      Market(
        currency:
            json['currency'] != null ? MarketCurrency.fromJson(json) : null,
      );

  // Properties
  /// Currency Symbol.
  final MarketCurrency currency;

  /// Clones a new instance
  Market copyWith({
    MarketCurrency currency,
  }) =>
      Market(currency: currency ?? this.currency);
}

/// Autogenerated from Currency

///
class MarketCurrency {
  /// Constructor
  MarketCurrency({this.maxPayout, this.minStake});

  /// Instance from JSON
  factory MarketCurrency.fromJson(
    Map<String, dynamic> json,
  ) =>
      MarketCurrency(
        maxPayout: json['max_payout'],
        minStake: json['min_stake'],
      );

  /// Maximum payout for this currency in this market.
  final int maxPayout;

  /// Minimum stake for this currency in this market.
  final int minStake;

  /// ToJson
  MarketCurrency copyWith({
    int maxPayout,
    int minStake,
  }) =>
      MarketCurrency(
        maxPayout: maxPayout ?? this.maxPayout,
        minStake: minStake ?? this.minStake,
      );
}
