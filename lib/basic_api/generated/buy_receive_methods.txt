   static final BaseAPI _api = Injector.getInjector().get<BaseAPI>();


 /// Buys a contract with parameters specified in given [BuyRequest]
  ///
  /// Throws a [ContractOperationException] if API response contains an error
  static Future<Contract> buy(BuyRequest request) async {
    final BuyResponse response = await _api.call(
      request: request,
    );

    checkException(
      response: response,
      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>
          ContractOperationException(baseExceptionModel: baseExceptionModel),
    );

    return Contract.fromJson(response.buy);
  }

  /// Buys contract with parameters specified in request and subscribes to it.
  ///
  /// Throws a [ContractOperationException] is API response contains an error
  static Stream<Contract> buyAndSubscribe(
    BuyRequest request, {
    RequestCompareFunction comparePredicate,
  }) =>
      _api
          .subscribe(request: request, comparePredicate: comparePredicate)
          .map<Contract>(
        (Response response) {
          checkException(
            response: response,
            exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>
                ContractOperationException(
                    baseExceptionModel: baseExceptionModel),
          );

          return response is BuyResponse
              ? Contract.fromJson(response.buy)
              : response is ProposalOpenContractResponse
                  ? OpenContract.fromJson(
                      response.proposalOpenContract,
                      subscriptionJson: response.subscription,
                    )
                  : null;
        },
      );
