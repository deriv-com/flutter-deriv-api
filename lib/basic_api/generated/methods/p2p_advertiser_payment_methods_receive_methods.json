{
  "methods": "static final BaseAPI _api = Injector()<BaseAPI>(); \n \n  /// Manage or list P2P advertiser payment methods. \n  /// \n  /// For parameters information refer to [P2pAdvertiserPaymentMethodsRequest]. \n  /// Throws an [BaseAPIException] if API response contains an error. \n  static Future<P2pAdvertiserPaymentMethodsReceive> fetchMethodsRaw( \n    P2pAdvertiserPaymentMethodsRequest request, \n  ) async { \n    final P2pAdvertiserPaymentMethodsReceive response = \n        await _api.call(request: request); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          BaseAPIException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Manage or list P2P advertiser payment methods. \n  /// \n  /// For parameters information refer to [P2pAdvertiserPaymentMethodsRequest]. \n  /// Throws an [BaseAPIException] if API response contains an error. \n  static Future<P2pAdvertiserPaymentMethodsResponse> fetchMethods( \n    P2pAdvertiserPaymentMethodsRequest request, \n  ) async { \n    final P2pAdvertiserPaymentMethodsReceive response = \n        await fetchMethodsRaw(request); \n \n    return P2pAdvertiserPaymentMethodsResponse.fromJson( \n      response.p2pAdvertiserPaymentMethods, \n    ); \n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart'; \nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart'; \nimport 'package:flutter_deriv_api/basic_api/generated/p2p_advertiser_payment_methods_receive.dart'; \nimport 'package:flutter_deriv_api/basic_api/generated/p2p_advertiser_payment_methods_send.dart'; \nimport 'package:flutter_deriv_api/helpers/helpers.dart'; \nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart'; \nimport 'package:deriv_dependency_injector/dependency_injector.dart';"
}
