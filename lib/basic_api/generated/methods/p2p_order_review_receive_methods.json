{
  "methods": "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!; \n \n  /// Cancel a P2P order review. \n  /// \n  /// For parameters information refer to [P2pOrderReviewReceive]. \n  /// Throws an [P2POrderException] if API response contains an error. \n  static Future<P2pOrderReviewReceive> reviewOrderRaw( \n    P2pOrderReviewRequest request, \n  ) async { \n    final P2pOrderReviewReceive response = await _api.call(request: request); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          P2POrderException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Cancel a P2P order review. \n  /// \n  /// For parameters information refer to [P2pOrderReviewReceive]. \n  /// Throws an [P2POrderException] if API response contains an error. \n  static Future<P2pOrderReviewResponse> reviewOrder( \n    P2pOrderReviewRequest request, \n  ) async { \n    final P2pOrderReviewReceive response = await reviewOrderRaw(request); \n \n    return P2pOrderReviewResponse.fromJson(response.p2pOrderReview); \n  }",
  "imports": "\nimport 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_review_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_review_send.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';\n"
}
