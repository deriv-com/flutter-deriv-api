{
  "methods": "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!; \n \n  /// Registers the client as a P2P (peer to peer) advertiser. \n  /// For parameters information refer to [P2pAdvertiserCreateRequest]. \n  static Future<P2pAdvertiserCreateResponse> createAdvertiser( \n    P2pAdvertiserCreateRequest request, \n  ) async { \n    final P2pAdvertiserCreateReceive response = \n        await createAdvertiserRaw(request); \n \n    return P2pAdvertiserCreateResponse.fromJson( \n        response.p2pAdvertiserCreate, response.subscription); \n  } \n \n  /// Registers the client as a P2P (peer to peer) advertiser. \n  /// For parameters information refer to [P2pAdvertiserCreateRequest]. \n  static Future<P2pAdvertiserCreateReceive> createAdvertiserRaw( \n    P2pAdvertiserCreateRequest request, \n  ) async { \n    final P2pAdvertiserCreateReceive response = await _api.call( \n      request: request.copyWith(subscribe: false), \n    ); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          P2PAdvertiserException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Registers the client as a P2P (peer to peer) advertiser. \n  /// For parameters information refer to [P2pAdvertiserCreateRequest]. \n  static Stream<P2pAdvertiserCreateResponse?> createAdvertiserAndSubscribe( \n    P2pAdvertiserCreateRequest request, { \n    RequestCompareFunction? comparePredicate, \n  }) => \n      createAdvertiserAndSubscribeRaw( \n        request, \n        comparePredicate: comparePredicate, \n      ).map( \n        (P2pAdvertiserCreateReceive? response) => response == null \n            ? null \n            : P2pAdvertiserCreateResponse.fromJson( \n                response.p2pAdvertiserCreate, \n                response.subscription, \n              ), \n      ); \n \n  /// Registers the client as a P2P (peer to peer) advertiser. \n  /// For parameters information refer to [P2pAdvertiserCreateRequest]. \n  static Stream<P2pAdvertiserCreateReceive?> createAdvertiserAndSubscribeRaw( \n    P2pAdvertiserCreateRequest request, { \n    RequestCompareFunction? comparePredicate, \n  }) => \n      _api \n          .subscribe(request: request, comparePredicate: comparePredicate)! \n          .map<P2pAdvertiserCreateReceive?>( \n        (Response response) { \n          checkException( \n            response: response, \n            exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n                P2PAdvertiserException(baseExceptionModel: baseExceptionModel), \n          ); \n \n          return response is P2pAdvertiserCreateReceive ? response : null; \n        }, \n      );",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_advertiser_create_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_advertiser_create_send.dart';\nimport 'package:flutter_deriv_api/basic_api/response.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/connection/call_manager/base_call_manager.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';\n"
}
