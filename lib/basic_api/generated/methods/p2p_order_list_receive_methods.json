{
  "methods": "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!; \n \n  /// Gets the list of [P2POrder] with parameters specified in [P2pOrderListRequest] \n  static Future<P2pOrderListResponse> fetchOrderList([ \n    P2pOrderListRequest? request, \n  ]) async { \n    final P2pOrderListReceive response = \n        await fetchOrderListRaw(request ?? const P2pOrderListRequest()); \n \n    return P2pOrderListResponse.fromJson( \n        response.p2pOrderList, response.subscription); \n  } \n \n  /// Gets the list of [P2POrder] with parameters specified in [P2pOrderListRequest] \n  static Future<P2pOrderListReceive> fetchOrderListRaw([ \n    P2pOrderListRequest? request, \n  ]) async { \n    final P2pOrderListReceive response = await _api.call( \n      request: request ?? const P2pOrderListRequest(), \n    ); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          P2POrderException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Subscribes to the list of [P2POrder] with parameters specified in [P2pOrderListRequest] \n  static Stream<P2pOrderListResponse?> subscribeOrderList({ \n    P2pOrderListRequest? request, \n    RequestCompareFunction? comparePredicate, \n  }) => \n      subscribeOrderListRaw( \n        request: request, \n        comparePredicate: comparePredicate, \n      ).map( \n        (P2pOrderListReceive? response) => response == null \n            ? null \n            : P2pOrderListResponse.fromJson( \n                response.p2pOrderList, \n                response.subscription, \n              ), \n      ); \n \n  /// Subscribes to the list of [P2POrder] with parameters specified in [P2pOrderListRequest] \n  static Stream<P2pOrderListReceive?> subscribeOrderListRaw({ \n    P2pOrderListRequest? request, \n    RequestCompareFunction? comparePredicate, \n  }) => \n      _api \n          .subscribe( \n        request: request ?? const P2pOrderListRequest(), \n        comparePredicate: comparePredicate, \n      )! \n          .map<P2pOrderListReceive?>( \n        (Response response) { \n          checkException( \n            response: response, \n            exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n                P2POrderException(baseExceptionModel: baseExceptionModel), \n          ); \n \n          return response is P2pOrderListReceive ? response : null; \n        }, \n      ); \n \n  /// Unsubscribes from order list subscription. \n  /// \n  /// Throws a [P2POrderException] if API response contains an error \n  Future<ForgetResponse?> unsubscribeOrderList() async { \n    if (subscription == null) { \n      return null; \n    } \n \n    final ForgetReceive response = \n        await _api.unsubscribe(subscriptionId: subscription!.id); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          P2POrderException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return ForgetResponse.fromJson(response.forget); \n  } \n \n  /// Unsubscribes from all order subscriptions (Subscriptions to a single order or list). \n  /// \n  /// Throws a [P2POrderException] if API response contains an error \n  static Future<ForgetAllResponse> unsubscribeAllOrder() => \n      P2pOrderInfoResponse.unsubscribeAllOrder();",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/api/response/forget_all_response_result.dart';\nimport 'package:flutter_deriv_api/api/response/forget_response_result.dart';\nimport 'package:flutter_deriv_api/api/response/p2p_order_info_response_result.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/forget_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_list_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_list_send.dart';\nimport 'package:flutter_deriv_api/basic_api/response.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/connection/call_manager/base_call_manager.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';\n"
}
