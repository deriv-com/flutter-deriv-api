{
    "methods" : "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>();\n\n  /// Gets the list of [P2POrder] with parameters specified in [P2pOrderListRequest]\n  static Future<P2pOrderListResponse> fetchOrderList([\n    P2pOrderListSend request,\n  ]) async {\n    final P2pOrderListReceive response = await _api.call(\n      request: request ?? const P2pOrderListSend(),\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          P2POrderException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return P2pOrderListResponse.fromJson(\n        response.p2pOrderList, response.subscription);\n  }\n\n  /// Subscribes to the list of [P2POrder] with parameters specified in [P2pOrderListRequest]\n  static Stream<P2pOrderListResponse> subscribeOrderList({\n    P2pOrderListSend request,\n    RequestCompareFunction comparePredicate,\n  }) =>\n      _api\n          .subscribe(\n        request: request ?? const P2pOrderListSend(),\n        comparePredicate: comparePredicate,\n      )\n          .map<P2pOrderListResponse>(\n        (Response response) {\n          checkException(\n            response: response,\n            exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n                P2POrderException(baseExceptionModel: baseExceptionModel),\n          );\n\n          return response is P2pOrderListReceive\n              ? P2pOrderListResponse.fromJson(\n                  response.p2pOrderList,\n                  response.subscription,\n                )\n              : null;\n        },\n      );\n\n  /// Unsubscribes from order list subscription.\n  ///\n  /// Throws a [P2POrderException] if API response contains an error\n  Future<ForgetResponse> unsubscribeOrderList() async {\n    if (subscription?.id == null) {\n      return null;\n    }\n\n    final ForgetReceive response =\n        await _api.unsubscribe(subscriptionId: subscription.id);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          P2POrderException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetResponse.fromJson(response.forget);\n  }\n\n  /// Unsubscribes from all order subscriptions (Subscriptions to a single order or list).\n  ///\n  /// Throws a [P2POrderException] if API response contains an error\n  static Future<ForgetAllResponse> unsubscribeAllOrder() =>\n      P2pOrderInfoResponse.unsubscribeAllOrder();\n",
    "imports" : "import 'package:meta/meta.dart';\n\nimport '../../basic_api/generated/forget_receive.dart';\nimport '../../basic_api/generated/p2p_order_list_receive.dart';\nimport '../../basic_api/generated/p2p_order_list_send.dart';\nimport '../../basic_api/response.dart';\nimport '../../helpers/helpers.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/connection/call_manager/base_call_manager.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';\nimport 'forget_all_receive_result.dart';\nimport 'forget_receive_result.dart';\nimport 'p2p_order_info_receive_result.dart';"
}