{
  "methods": "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Retrieves information about a P2P (peer to peer) advertiser.\n  ///\n  /// For parameters information refer to [P2pAdvertiserInfoRequest].\n  /// Throws a [P2PAdvertiserException] if API response contains an error\n  static Future<P2pAdvertiserInfoResponse> fetchAdvertiserInformation(\n    P2pAdvertiserInfoRequest request,\n  ) async {\n    final P2pAdvertiserInfoReceive response =\n        await fetchAdvertiserInformationRaw(request);\n\n    return P2pAdvertiserInfoResponse.fromJson(\n        response.p2pAdvertiserInfo, response.subscription);\n  }\n\n  /// Retrieves information about a P2P (peer to peer) advertiser.\n  ///\n  /// For parameters information refer to [P2pAdvertiserInfoRequest].\n  /// Throws a [P2PAdvertiserException] if API response contains an error\n  static Future<P2pAdvertiserInfoReceive> fetchAdvertiserInformationRaw(\n    P2pAdvertiserInfoRequest request,\n  ) async {\n    final P2pAdvertiserInfoReceive response = await _api.call(\n      request: request.copyWith(subscribe: false),\n    );\n\n    return response;\n  }\n\n  /// Subscribes to information about a P2P (peer to peer) advertiser.\n  /// For parameters information refer to [P2pAdvertiserInfoRequest].\n  static Stream<P2pAdvertiserInfoResponse?> subscribeAdvertiserInformation(\n    P2pAdvertiserInfoRequest request, {\n    RequestCompareFunction? comparePredicate,\n  }) =>\n      subscribeAdvertiserInformationRaw(\n        request,\n        comparePredicate: comparePredicate,\n      ).map(\n        (P2pAdvertiserInfoReceive? response) => response != null\n            ? P2pAdvertiserInfoResponse.fromJson(\n                response.p2pAdvertiserInfo,\n                response.subscription,\n              )\n            : null,\n      );\n\n  /// Subscribes to information about a P2P (peer to peer) advertiser.\n  /// For parameters information refer to [P2pAdvertiserInfoRequest].\n  static Stream<P2pAdvertiserInfoReceive?> subscribeAdvertiserInformationRaw(\n    P2pAdvertiserInfoRequest request, {\n    RequestCompareFunction? comparePredicate,\n  }) =>\n      _api\n          .subscribe(request: request, comparePredicate: comparePredicate)!\n          .map<P2pAdvertiserInfoReceive?>(\n        (Response response) {\n          checkException(\n            response: response,\n            exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n                P2PAdvertiserException(baseExceptionModel: baseExceptionModel),\n          );\n\n          return response is P2pAdvertiserInfoReceive ? response : null;\n        },\n      );\n\n  /// Unsubscribes from P2P (peer to peer) advertiser information.\n  ///\n  /// Throws a [P2PAdvertiserException] if API response contains an error\n  Future<ForgetResponse?> unsubscribeAdvertiser() async {\n    if (subscription == null) {\n      return null;\n    }\n\n    final ForgetReceive response =\n        await _api.unsubscribe(subscriptionId: subscription!.id);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          P2PAdvertiserException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetResponse.fromJson(response.forget);\n  }\n\n  /// Unsubscribes all P2P (peer to peer) advertisers.\n  ///\n  /// Throws a [P2PAdvertiserException] if API response contains an error\n  static Future<ForgetAllResponse> unsubscribeAllAdvertiser() async {\n    final ForgetAllReceive response =\n        await _api.unsubscribeAll(method: ForgetStreamType.p2pAdvertiser);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          P2PAdvertiserException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetAllResponse.fromJson(response.forgetAll);\n  }\n",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/api/models/enums.dart';\nimport 'package:flutter_deriv_api/api/response/forget_all_response_result.dart';\nimport 'package:flutter_deriv_api/api/response/forget_response_result.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/forget_all_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/forget_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_advertiser_info_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_advertiser_info_send.dart';\nimport 'package:flutter_deriv_api/basic_api/response.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/connection/call_manager/base_call_manager.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';\n"
}
