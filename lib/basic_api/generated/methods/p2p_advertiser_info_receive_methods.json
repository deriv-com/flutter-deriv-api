{
    "methods" : "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>();\n\n  /// Retrieves information about a P2P (peer to peer) advertiser.\n  ///\n  /// For parameters information refer to [P2pAdvertiserInfoRequest].\n  /// Throws a [P2PAdvertiserException] if API response contains an error\n  static Future<P2pAdvertiserInfoResponse> fetchAdvertiserInformation(\n    P2pAdvertiserInfoSend request,\n  ) async {\n    final P2pAdvertiserInfoReceive response = await _api.call(\n      request: request.copyWith(subscribe: false),\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          P2PAdvertiserException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return P2pAdvertiserInfoResponse.fromJson(\n        response.p2pAdvertiserInfo, response.subscription);\n  }\n\n  /// Subscribes to information about a P2P (peer to peer) advertiser.\n  /// For parameters information refer to [P2pAdvertiserInfoRequest].\n  static Stream<P2pAdvertiserInfoResponse> subscribeAdvertiserInformation(\n    P2pAdvertiserInfoSend request, {\n    RequestCompareFunction comparePredicate,\n  }) =>\n      _api\n          .subscribe(request: request, comparePredicate: comparePredicate)\n          .map<P2pAdvertiserInfoResponse>(\n        (Response response) {\n          checkException(\n            response: response,\n            exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n                P2PAdvertiserException(baseExceptionModel: baseExceptionModel),\n          );\n\n          return response is P2pAdvertiserInfoReceive\n              ? P2pAdvertiserInfoResponse.fromJson(\n                  response.p2pAdvertiserInfo,\n                  response.subscription,\n                )\n              : null;\n        },\n      );\n\n  /// Unsubscribes from P2P (peer to peer) advertiser information.\n  ///\n  /// Throws a [P2PAdvertiserException] if API response contains an error\n  Future<ForgetResponse> unsubscribeAdvertiser() async {\n    if (subscription?.id == null) {\n      return null;\n    }\n\n    final ForgetReceive response =\n        await _api.unsubscribe(subscriptionId: subscription.id);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          P2PAdvertiserException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetResponse.fromJson(response.forget);\n  }\n\n  /// Unsubscribes all P2P (peer to peer) advertisers.\n  ///\n  /// Throws a [P2PAdvertiserException] if API response contains an error\n  static Future<ForgetAllResponse> unsubscribeAllAdvertiser() async {\n    final ForgetAllReceive response =\n        await _api.unsubscribeAll(method: ForgetStreamType.p2pAdvertiser);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          P2PAdvertiserException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetAllResponse.fromJson(response.forgetAll);\n  }",
    "imports" : "import 'package:meta/meta.dart';\n\nimport '../../basic_api/generated/forget_all_receive.dart';\nimport '../../basic_api/generated/forget_receive.dart';\nimport '../../basic_api/generated/p2p_advertiser_info_receive.dart';\nimport '../../basic_api/generated/p2p_advertiser_info_send.dart';\nimport '../../basic_api/response.dart';\nimport '../../helpers/helpers.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/connection/call_manager/base_call_manager.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';\nimport '../models/enums.dart';\nimport 'forget_all_receive_result.dart';\nimport 'forget_receive_result.dart';"
}