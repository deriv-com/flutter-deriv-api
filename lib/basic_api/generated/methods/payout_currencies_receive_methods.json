{
    "methods" : "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Retrieves a list of available option payout currencies.\n  ///\n  /// If a user is logged in, only the currencies available for the account will be returned.\n  /// Throws a [PayoutCurrencyException] if API response contains a error\n  static Future<PayoutCurrenciesResponse> fetchPayoutCurrencies([\n    PayoutCurrenciesSend? request,\n  ]) async {\n    final PayoutCurrenciesReceive response = await _api.call(\n      request: request ?? const PayoutCurrenciesSend(),\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          PayoutCurrencyException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return PayoutCurrenciesResponse.fromJson(response.payoutCurrencies);\n  }",
    "imports" : "import '../../basic_api/generated/payout_currencies_receive.dart';\nimport '../../basic_api/generated/payout_currencies_send.dart';\nimport '../../helpers/helpers.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';"
}