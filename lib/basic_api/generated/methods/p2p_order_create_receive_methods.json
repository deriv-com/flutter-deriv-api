{
  "methods": "\n  static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Creates order with parameters specified in [P2pOrderCreateRequest]\n  static Future<P2pOrderCreateResponse> create(\n      P2pOrderCreateRequest request) async {\n    final P2pOrderCreateReceive response = await createRaw(request);\n\n    return P2pOrderCreateResponse.fromJson(\n        response.p2pOrderCreate, response.subscription);\n  }\n\n  /// Creates order with parameters specified in [P2pOrderCreateRequest]\n  static Future<P2pOrderCreateReceive> createRaw(\n      P2pOrderCreateRequest request) async {\n    final P2pOrderCreateReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          P2POrderException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return response;\n  }\n\n  /// Creates order and subscribes to the result with parameters specified in [P2pOrderCreateRequest]\n  ///\n  /// Throws a [P2POrderException] if API response contains an error\n  static Stream<P2pOrderCreateResponse?> createAndSubscribe(\n    P2pOrderCreateRequest request, {\n    RequestCompareFunction? comparePredicate,\n  }) =>\n      createAndSubscribeRaw(\n        request,\n        comparePredicate: comparePredicate,\n      ).map(\n        (P2pOrderCreateReceive? response) => response != null\n            ? P2pOrderCreateResponse.fromJson(\n                response.p2pOrderCreate,\n                response.subscription,\n              )\n            : null,\n      );\n\n  /// Creates order and subscribes to the result with parameters specified in [P2pOrderCreateRequest]\n  ///\n  /// Throws a [P2POrderException] if API response contains an error\n  static Stream<P2pOrderCreateReceive?> createAndSubscribeRaw(\n    P2pOrderCreateRequest request, {\n    RequestCompareFunction? comparePredicate,\n  }) =>\n      _api.subscribe(request: request, comparePredicate: comparePredicate)!.map(\n        (Response response) {\n          checkException(\n            response: response,\n            exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n                P2POrderException(baseExceptionModel: baseExceptionModel),\n          );\n\n          return response is P2pOrderCreateReceive ? response : null;\n        },\n      );",
  "imports": "\nimport 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_create_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_create_send.dart';\nimport 'package:flutter_deriv_api/basic_api/response.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/connection/call_manager/base_call_manager.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';\n"
}
