{
  "methods": "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!; \n \n  /// Gets Website status. \n  /// \n  /// For parameters information refer to [WebsiteStatusRequest]. \n  /// Throws a [WebsiteStatusException] if API response contains an error. \n  static Future<WebsiteStatusReceive> fetchWebsiteStatusRaw([ \n    WebsiteStatusRequest? request, \n  ]) async { \n    final WebsiteStatusReceive response = await _api.call( \n      request: request ?? const WebsiteStatusRequest(), \n    ); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          WebsiteStatusException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Subscribes to website status. \n  /// \n  /// Throws a [WebsiteStatusException] if API response contains an error. \n  static Stream<WebsiteStatusResponse?> subscribeWebsiteStatusRaw( \n    WebsiteStatusRequest request, { \n    RequestCompareFunction? comparePredicate, \n  }) => \n      _api \n          .subscribe(request: request, comparePredicate: comparePredicate)! \n          .map<WebsiteStatusResponse?>( \n        (Response response) { \n          checkException( \n            response: response, \n            exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n                WebsiteStatusException(baseExceptionModel: baseExceptionModel), \n          ); \n \n          return response is WebsiteStatusResponse \n              ? response as WebsiteStatusResponse \n              : null; \n        }, \n      ); \n \n  /// Unsubscribes from website status. \n  /// \n  /// Throws an [WebsiteStatusException] if the API response contains an error. \n  Future<ForgetReceive?> unsubscribeWebsiteStatusRaw() async { \n    if (subscription == null) { \n      return null; \n    } \n \n    final ForgetReceive response = \n        await _api.unsubscribe(subscriptionId: subscription!.id); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          WebsiteStatusException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Unsubscribes all website status subscriptions. \n  /// \n  /// Throws an [WebsiteStatusException] if the API response contains an error. \n  static Future<ForgetAllReceive> unsubscribeAllWebsiteStatusRaw() async { \n    final ForgetAllReceive response = \n        await _api.unsubscribeAll(method: ForgetStreamType.websiteStatus); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          WebsiteStatusException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Gets Website status. \n  /// \n  /// Throws an [WebsiteStatusException] if the API response contains an error. \n  static Future<WebsiteStatusResponse> fetchWebsiteStatus([ \n    WebsiteStatusRequest? request, \n  ]) async { \n    final WebsiteStatusReceive response = await fetchWebsiteStatusRaw(request); \n \n    return WebsiteStatusResponse.fromJson( \n      response.websiteStatus, \n      response.subscription, \n    ); \n  } \n \n  /// Subscribes to website status. \n  static Stream<WebsiteStatusResponse?> subscribeWebsiteStatus( \n    WebsiteStatusRequest request, { \n    RequestCompareFunction? comparePredicate, \n  }) => \n      subscribeWebsiteStatusRaw(request).map( \n        (WebsiteStatusResponse? response) => response is WebsiteStatusResponse \n            ? WebsiteStatusResponse.fromJson( \n                response.websiteStatus, \n                response.subscription, \n              ) \n            : null, \n      ); \n \n  /// Unsubscribes from website status. \n  /// \n  /// Throws an [WebsiteStatusException] if the API response contains an error. \n  Future<ForgetResponse?> unsubscribeWebsiteStatus() async { \n    final ForgetReceive? response = await unsubscribeWebsiteStatusRaw(); \n \n    return ForgetResponse.fromJson(response?.forget); \n  } \n \n  /// Unsubscribes all website status subscriptions. \n  /// \n  /// Throws an [WebsiteStatusException] if the API response contains an error. \n  static Future<ForgetAllResponse> unsubscribeAllWebsiteStatus() async { \n    final ForgetAllReceive response = await unsubscribeAllWebsiteStatusRaw(); \n \n    return ForgetAllResponse.fromJson(response.forgetAll); \n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/api/models/enums.dart';\nimport 'package:flutter_deriv_api/api/response/forget_all_response_result.dart';\nimport 'package:flutter_deriv_api/api/response/forget_response_result.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/forget_all_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/forget_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/website_status_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/website_status_send.dart';\nimport 'package:flutter_deriv_api/basic_api/response.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/connection/call_manager/base_call_manager.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';\n"
}
