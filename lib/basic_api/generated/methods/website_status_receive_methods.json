{
    "methods" : " static final BaseAPI _api = Injector.getInjector().get<BaseAPI>();\n\n  /// Gets Website status\n  ///\n  /// Throws a [WebsiteStatusException] if API response contains an error\n  static Future<WebsiteStatusResponse> fetchWebsiteStatus([\n    WebsiteStatusSend request,\n  ]) async {\n    final WebsiteStatusReceive response = await _api.call(\n      request: request ?? const WebsiteStatusSend(),\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          WebsiteStatusException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return WebsiteStatusResponse.fromJson(\n        response.websiteStatus, response.subscription);\n  }\n\n  /// Subscribes to website status\n  static Stream<WebsiteStatusResponse> subscribeWebsiteStatus(\n    WebsiteStatusSend request, {\n    RequestCompareFunction comparePredicate,\n  }) =>\n      _api\n          .subscribe(request: request, comparePredicate: comparePredicate)\n          .map<WebsiteStatusResponse>(\n        (Response response) {\n          checkException(\n            response: response,\n            exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n                WebsiteStatusException(baseExceptionModel: baseExceptionModel),\n          );\n\n          return response is WebsiteStatusReceive\n              ? WebsiteStatusResponse.fromJson(\n                  response.websiteStatus,\n                  response.subscription,\n                )\n              : null;\n        },\n      );\n\n  /// Unsubscribes from website status\n  ///\n  /// Throws a [WebsiteStatusException] if API response contains an error\n  Future<ForgetResponse> unsubscribeWebsiteStatus() async {\n    if (subscription?.id == null) {\n      return null;\n    }\n\n    final ForgetReceive response =\n        await _api.unsubscribe(subscriptionId: subscription.id);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          WebsiteStatusException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetResponse.fromJson(response.forget);\n  }\n\n  /// Unsubscribes all website status subscriptions.\n  ///\n  /// Throws a [WebsiteStatusException] if API response contains an error\n  static Future<ForgetAllResponse> unsubscribeAllWebsiteStatus() async {\n    final ForgetAllReceive response =\n        await _api.unsubscribeAll(method: ForgetStreamType.websiteStatus);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          WebsiteStatusException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetAllResponse.fromJson(response.forgetAll);\n  }\n\n",
    "imports" : "import 'package:meta/meta.dart';\n\nimport '../../basic_api/generated/forget_all_receive.dart';\nimport '../../basic_api/generated/forget_receive.dart';\nimport '../../basic_api/generated/website_status_receive.dart';\nimport '../../basic_api/generated/website_status_send.dart';\nimport '../../basic_api/response.dart';\nimport '../../helpers/helpers.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/connection/call_manager/base_call_manager.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';\nimport '../models/enums.dart';\nimport 'forget_all_receive_result.dart';\nimport 'forget_receive_result.dart';"
}