{
  "methods": "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!; \n \n  /// Service Token. \n  /// \n  /// Retrieves the authorization token for the specified service. \n  /// For parameters information refer to [ServiceTokenRequest]. \n  /// Throws a [APITokenException] if API response contains an error. \n  static Future<ServiceTokenReceive> getServiceTokenRaw( \n    ServiceTokenRequest request, \n  ) async { \n    final ServiceTokenReceive response = await _api.call(request: request); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          APITokenException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Service Token. \n  /// \n  /// Retrieves the authorization token for the specified service. \n  /// For parameters information refer to [ServiceTokenRequest]. \n  /// Throws a [APITokenException] if API response contains an error. \n  static Future<ServiceTokenResponse> getServiceToken( \n    ServiceTokenRequest request, \n  ) async { \n    final ServiceTokenReceive response = await getServiceTokenRaw(request); \n \n    return ServiceTokenResponse.fromJson(response.serviceToken); \n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/api.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/trading_times_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/trading_times_send.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';\n"
}
