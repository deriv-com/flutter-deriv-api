{
    "methods" : "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Authorizes current WebSocket session to act on behalf of the owner of a given token.\n  ///\n  /// For parameters information refer to [AuthorizeRequest].\n  /// Throws an [AuthorizeException] if API response contains an error\n  static Future<AuthorizeResponse> authorizeMethod(\n      AuthorizeRequest request) async {\n    final AuthorizeReceive response = await _api.call(\n      request: request,\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          AuthorizeException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return AuthorizeResponse.fromJson(response.authorize);\n  }",
    "imports" : "import '../../basic_api/generated/authorize_receive.dart';\nimport '../../basic_api/generated/authorize_send.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../../helpers/helpers.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';"
}