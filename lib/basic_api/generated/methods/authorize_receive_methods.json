{
  "methods": "static final BaseAPI _api = Injector().get<BaseAPI>()!; \n \n  /// Authorizes current WebSocket session to act on behalf of the owner of a given token. \n  /// \n  /// For parameters information refer to [AuthorizeRequest]. \n  /// Throws an [AuthorizeException] if API response contains an error. \n  static Future<AuthorizeReceive> authorizeMethodRaw( \n    AuthorizeRequest request, \n  ) async { \n    final AuthorizeReceive response = await _api.call( \n      request: request, \n    ); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          AuthorizeException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Authorizes current WebSocket session to act on behalf of the owner of a given token. \n  /// \n  /// For parameters information refer to [AuthorizeRequest]. \n  /// Throws an [AuthorizeException] if API response contains an error. \n  static Future<AuthorizeResponse> authorizeMethod( \n    AuthorizeRequest request, \n  ) async { \n    final AuthorizeReceive response = await authorizeMethodRaw(request); \n \n    return AuthorizeResponse.fromJson(response.authorize); \n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/authorize_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/authorize_send.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:deriv_dependency_injector/dependency_injector.dart';\n"
}
