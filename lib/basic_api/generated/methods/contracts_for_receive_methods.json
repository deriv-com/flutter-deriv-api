{
  "methods": "static final BaseAPI _api = Injector()<BaseAPI>();\n\n  /// Gets available contracts for given symbol in [ContractsForRequest]\n  ///\n  /// Throws a [ContractsForSymbolException] if API response contains an error\n  static Future<ContractsForResponse> fetchContractsForSymbol(\n    ContractsForRequest request,\n  ) async {\n    final ContractsForReceive response = await _api.call(\n      request: request,\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          ContractsForSymbolException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ContractsForResponse.fromJson(response.contractsFor);\n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/contracts_for_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/contracts_for_send.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:deriv_dependency_injector/dependency_injector.dart';\n"
}
