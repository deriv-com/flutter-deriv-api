{
    "methods" : "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Gets available contracts for given symbol in [ContractsForRequest]\n  ///\n  /// Throws a [ContractsForSymbolException] if API response contains an error\n  static Future<ContractsForResponse> fetchContractsForSymbol(\n    ContractsForRequest request,\n  ) async {\n    final ContractsForReceive response = await _api.call(\n      request: request,\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          ContractsForSymbolException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ContractsForResponse.fromJson(response.contractsFor);\n  }",
    "imports" : "import '../../basic_api/generated/contracts_for_receive.dart';\nimport '../../basic_api/generated/contracts_for_send.dart';\nimport '../../helpers/helpers.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';"
}