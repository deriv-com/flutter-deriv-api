{
    "methods" : "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Gets back-end server epoch time.\n  ///\n  /// Throws a [ServerTimeException] if API response contains an error\n  static Future<TimeResponse> fetchTime([\n    TimeSend? request,\n  ]) async {\n    final TimeReceive response = await _api.call(\n      request: request ?? const TimeSend(),\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          ServerTimeException(),\n    );\n\n    return TimeResponse.fromJson(response.time);\n  }",
    "imports" : "import '../../basic_api/generated/time_receive.dart';\nimport '../../basic_api/generated/time_send.dart';\nimport '../../helpers/helpers.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';"
}