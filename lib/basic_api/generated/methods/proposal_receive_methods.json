{
  "methods": " static final BaseAPI _api = Injector()<BaseAPI>();\n\n  /// Gets the price proposal for contract\n  ///\n  /// For parameters information refer to [ProposalRequest]\n  /// Throws a [ContractOperationException] if API response contains an error\n  static Future<ProposalResponse> fetchPriceForContract(\n    ProposalRequest request,\n  ) async {\n    final ProposalReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          ContractOperationException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ProposalResponse.fromJson(response.proposal, response.subscription);\n  }\n\n  /// Gets the price proposal for contract.\n  ///\n  /// For parameters information refer to [ProposalRequest]\n  /// Throws a [ContractOperationException] if API response contains an error\n  static Stream<ProposalResponse?> subscribePriceForContract(\n    ProposalRequest request, {\n    RequestCompareFunction? comparePredicate,\n  }) =>\n      _api\n          .subscribe(request: request, comparePredicate: comparePredicate)!\n          .map<ProposalResponse?>(\n        (Response response) {\n          checkException(\n            response: response,\n            exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n                ContractOperationException(\n                    baseExceptionModel: baseExceptionModel),\n          );\n\n          return response is ProposalReceive\n              ? ProposalResponse.fromJson(\n                  response.proposal,\n                  response.subscription,\n                )\n              : null;\n        },\n      );\n\n  /// Unsubscribes from price proposal subscription.\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  Future<ForgetResponse?> unsubscribeProposal() async {\n    if (subscription == null) {\n      return null;\n    }\n\n    final ForgetReceive response =\n        await _api.unsubscribe(subscriptionId: subscription!.id);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          ContractOperationException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetResponse.fromJson(response.forget);\n  }\n\n  /// Unsubscribes all proposal subscriptions.\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  static Future<ForgetAllResponse> unsubscribeAllProposal() async {\n    final ForgetAllReceive response =\n        await _api.unsubscribeAll(method: ForgetStreamType.proposal);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          ContractOperationException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetAllResponse.fromJson(response.forgetAll);\n  }\n\n  /// Buys this proposal contract with [price] specified.\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  Future<BuyResponse> buy({double? price}) => BuyResponse.buyMethod(BuyRequest(\n        buy: proposal?.id,\n        price: price ?? proposal?.askPrice,\n      ));\n\n  /// Buys this proposal contract with [price] specified and subscribes to it.\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  Stream<ProposalOpenContractResponse?> buyAndSubscribe({double? price}) =>\n      BuyResponse.buyAndSubscribe(BuyRequest(\n        buy: proposal?.id,\n        price: price ?? proposal?.askPrice,\n      ));",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/contract_operations_exception.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/api/models/enums.dart';\nimport 'package:flutter_deriv_api/api/response/buy_response_result.dart';\nimport 'package:flutter_deriv_api/api/response/forget_all_response_result.dart';\nimport 'package:flutter_deriv_api/api/response/forget_response_result.dart';\nimport 'package:flutter_deriv_api/api/response/proposal_open_contract_response_result.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/buy_send.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/forget_all_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/forget_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/proposal_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/proposal_send.dart';\nimport 'package:flutter_deriv_api/basic_api/response.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/connection/call_manager/base_call_manager.dart';\nimport 'package:deriv_dependency_injector/dependency_injector.dart';\n"
}
