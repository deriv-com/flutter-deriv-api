{
  "methods": "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Gets the balance of account\n  ///\n  /// For parameters info refer to [BalanceRequest]\n  /// Throws a [BalanceException] if API response contains an error\n  static Future<BalanceResponse> fetchBalance(BalanceRequest request) async {\n    final BalanceReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          BalanceException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return BalanceResponse.fromJson(response.balance, response.subscription);\n  }\n\n  /// Instead of one call [Balance.fetchBalance] gets stream of [Balance]\n  ///\n  /// Throws a [BalanceException] if API response contains an error\n  static Stream<BalanceResponse?> subscribeBalance(\n    BalanceRequest request, {\n    RequestCompareFunction? comparePredicate,\n  }) =>\n      _api\n          .subscribe(request: request, comparePredicate: comparePredicate)!\n          .map((Response response) {\n        checkException(\n          response: response,\n          exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n              BalanceException(baseExceptionModel: baseExceptionModel),\n        );\n\n        return response is BalanceReceive\n            ? BalanceResponse.fromJson(\n                response.balance,\n                response.subscription,\n              )\n            : null;\n      });\n\n  /// Unsubscribes from balance subscription.\n  ///\n  /// Throws a [BalanceException] if API response contains an error\n  Future<ForgetResponse?> unsubscribeBalance() async {\n    if (subscription == null) {\n      return null;\n    }\n\n    final ForgetReceive response =\n        await _api.unsubscribe(subscriptionId: subscription!.id);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          BalanceException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetResponse.fromJson(response.forget);\n  }\n\n  /// Unsubscribes all balance subscriptions.\n  ///\n  /// Throws a [BalanceException] if API response contains an error\n  static Future<ForgetAllResponse> unsubscribeAllBalance() async {\n    final ForgetAllReceive response =\n        await _api.unsubscribeAll(method: ForgetStreamType.balance);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          BalanceException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetAllResponse.fromJson(response.forgetAll);\n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/api/models/enums.dart';\nimport 'package:flutter_deriv_api/api/response/forget_all_response_result.dart';\nimport 'package:flutter_deriv_api/api/response/forget_response_result.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/balance_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/balance_send.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/forget_all_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/forget_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/response.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/connection/call_manager/base_call_manager.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';\n"
}
