{
  "methods": "static final BaseAPI _api = Injector()<BaseAPI>(); \n \n  /// Logs out from the web-socket's session. \n  /// \n  /// For parameters information refer to [LogoutRequest]. \n  /// Throws an [BaseAPIException] if API response contains an error. \n  static Future<LogoutReceive> logoutMethodRaw([LogoutRequest? request]) async { \n    final LogoutReceive response = \n        await _api.call(request: request ?? const LogoutRequest()); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          BaseAPIException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Logs out from the web-socket's session. \n  /// \n  /// For parameters information refer to [LogoutRequest]. \n  /// Throws an [BaseAPIException] if API response contains an error. \n  static Future<LogoutResponse> logoutMethod([LogoutRequest? request]) async { \n    final LogoutReceive response = await logoutMethodRaw(request); \n \n    return LogoutResponse.fromJson(response.logout); \n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/logout_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/logout_send.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:deriv_dependency_injector/dependency_injector.dart';\n"
}
