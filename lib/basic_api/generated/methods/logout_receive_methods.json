{
    "methods": "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>();\n\n  /// Logs out from the web-socket's session.\n  ///\n  /// For parameters information refer to [LogoutRequest].\n  /// Throws an [AuthorizeException] if API response contains an error\n  static Future<LogoutResponse> logoutMethod([\n    LogoutSend request,\n  ]) async {\n    final LogoutReceive response = await _api.call(\n      request: request ?? const LogoutSend(),\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          AuthorizeException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return LogoutResponse.fromJson(response.logout);\n  }",
    "imports": "import 'package:meta/meta.dart';\n\nimport '../../basic_api/generated/logout_receive.dart';\nimport '../../basic_api/generated/logout_send.dart';\nimport '../../helpers/helpers.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';"
}