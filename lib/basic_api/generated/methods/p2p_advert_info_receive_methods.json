{
    "methods" : " static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Retrieves information about a P2P (peer to peer) advert.\n  ///\n  /// For parameters information refer to [P2pAdvertInfoRequest].\n  /// Throws a [P2PAdvertException] if API response contains an error\n  static Future<P2pAdvertInfoResponse> fetchAdvert(\n    P2pAdvertInfoRequest request,\n  ) async {\n    final P2pAdvertInfoReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          P2PAdvertException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return P2pAdvertInfoResponse.fromJson(response.p2pAdvertInfo,response.subscription);\n  }\n\n  /// Updates a P2P (peer to peer) advert. Can only be used by the advertiser.\n  ///\n  /// [delete] to permanently delete the advert\n  /// [isActive] to activate or deactivate the advert\n  /// Throws a [P2PAdvertException] if API response contains an error\n  Future<P2pAdvertUpdateResponse> update({\n    bool? delete,\n    bool? isActive,\n  }) =>\n      P2pAdvertUpdateResponse.updateAdvert(\n        P2pAdvertUpdateRequest(\n          id: p2pAdvertInfo?.id,\n          delete: delete ?? false,\n          isActive: isActive ?? p2pAdvertInfo?.isActive,\n        ),\n      );\n\n  /// Deletes permanently a P2P (peer to peer) advert. Can only be used by the advertiser.\n  ///\n  /// Throws a [P2PAdvertException] if API response contains an error\n  Future<P2pAdvertUpdateResponse> delete() => update(delete: true);\n\n  /// Activates a P2P (peer to peer) advert. Can only be used by the advertiser.\n  ///\n  /// Throws a [P2PAdvertException] if API response contains an error\n  Future<P2pAdvertUpdateResponse> activate() async => update(isActive: true);\n\n  /// Deactivates a P2P (peer to peer) advert. Can only be used by the advertiser.\n  ///\n  /// Throws a [P2PAdvertException] if API response contains an error\n  Future<P2pAdvertUpdateResponse> deactivate() async => update(isActive: false);\n\n  /// Creates order on this advert.\n  ///\n  /// [amount] is the amount of currency to be bought or sold.\n  /// [contactInfo] is seller contact information. Only applicable for [OrderType.sell].\n  /// [paymentInfo] is payment instructions. Only applicable for [OrderType.sell].\n  /// Throws [P2POrderException] if API response contains an error.\n  Future<P2pOrderCreateResponse> createOrder({\n    required double amount,\n    String? contactInfo,\n    String? paymentInfo,\n  }) =>\n      P2pOrderCreateResponse.create(\n        P2pOrderCreateRequest(\n          advertId: p2pAdvertInfo?.id,\n          amount: amount,\n          contactInfo: contactInfo,\n          paymentInfo: paymentInfo,\n          paymentMethodIds: const <int>[],\n        ),\n      );\n",
    "imports" : "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/api/response/p2p_advert_update_response_result.dart';\nimport 'package:flutter_deriv_api/api/response/p2p_order_create_response_result.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_advert_info_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_advert_info_send.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_advert_update_send.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_order_create_send.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';\n"
}