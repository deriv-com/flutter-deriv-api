
{
  "methods" : "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Cancels a contract with parameters specified in [CancelRequest].\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  static Future<CancelResponse> cancelContract(CancelSend request) async {\n    final CancelReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          ContractOperationException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return CancelResponse.fromJson(response.cancel);\n  }",
  "imports" : "import '../../basic_api/generated/cancel_receive.dart';\nimport '../../basic_api/generated/cancel_send.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../../helpers/helpers.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';"
}