{
  "methods": "static final BaseAPI _api = Injector()<BaseAPI>();\n\n  /// Cancels a contract with parameters specified in [CancelRequest].\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  static Future<CancelResponse> cancelContract(CancelRequest request) async {\n    final CancelReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          ContractOperationException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return CancelResponse.fromJson(response.cancel);\n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/cancel_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/cancel_send.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:deriv_dependency_injector/dependency_injector.dart';\n"
}
