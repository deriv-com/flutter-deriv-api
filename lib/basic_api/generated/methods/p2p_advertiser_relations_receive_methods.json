{
  "methods": "static final BaseAPI _api = Injector().get<BaseAPI>()!; \n \n  /// Updates and returns favourite and blocked advertisers of the current user. \n  /// \n  /// For parameters information refer to [P2pAdvertiserRelationsRequest]. \n  /// Throws an [P2PAdvertiserException] if API response contains an error. \n  static Future<P2pAdvertiserRelationsReceive> fetchRaw( \n    P2pAdvertiserRelationsRequest request, \n  ) async { \n    final P2pAdvertiserRelationsReceive response = \n        await _api.call(request: request); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          P2PAdvertiserException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Updates and returns favourite and blocked advertisers of the current user. \n  /// \n  /// For parameters information refer to [P2pAdvertiserRelationsRequest]. \n  /// Throws an [P2PAdvertiserException] if API response contains an error. \n  static Future<P2pAdvertiserRelationsResponse> fetch( \n    P2pAdvertiserRelationsRequest request, \n  ) async { \n    final P2pAdvertiserRelationsReceive response = await fetchRaw(request); \n \n    return P2pAdvertiserRelationsResponse.fromJson( \n        response.p2pAdvertiserRelations); \n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_advertiser_relations_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/p2p_advertiser_relations_send.dart';\n\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:deriv_dependency_injector/dependency_injector.dart';\n"
}
