{
    "methods" : "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>();\n\n  /// Gets the current spot of the the bought contract specified in [ProposalOpenContractRequest]\n  ///\n  /// Throws a [ContractOperationException] if API response contains any error\n  static Future<ProposalOpenContractResponse> fetchContractState(\n    ProposalOpenContractSend request,\n  ) async {\n    final ProposalOpenContractReceive response = await _api.call(\n      request: request,\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          ContractOperationException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ProposalOpenContractResponse.fromJson(\n        response.proposalOpenContract, response.subscription);\n  }\n\n  /// Subscribes to the bought contract state specified in [ProposalOpenContractRequest]\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  static Stream<ProposalOpenContractResponse> subscribeContractState(\n    ProposalOpenContractSend request, {\n    RequestCompareFunction comparePredicate,\n  }) =>\n      _api\n          .subscribe(request: request, comparePredicate: comparePredicate)\n          .map<ProposalOpenContractResponse>(\n        (Response response) {\n          checkException(\n            response: response,\n            exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n                ContractOperationException(\n                    baseExceptionModel: baseExceptionModel),\n          );\n\n          return response is ProposalOpenContractReceive\n              ? ProposalOpenContractResponse.fromJson(\n                  response.proposalOpenContract,\n                  response.subscription,\n                )\n              : null;\n        },\n      );\n\n  /// Unsubscribes from open contract subscription.\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  Future<ForgetResponse> unsubscribeOpenContract() async {\n    if (subscription?.id == null) {\n      return null;\n    }\n\n    final ForgetReceive response =\n        await _api.unsubscribe(subscriptionId: subscription.id);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          ContractOperationException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetResponse.fromJson(response.forget);\n  }\n\n  /// Unsubscribes all open contract subscriptions.\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  static Future<ForgetAllResponse> unsubscribeAllOpenContract() async {\n    final ForgetAllReceive response = await _api.unsubscribeAll(\n      method: ForgetStreamType.proposalOpenContract,\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          ContractOperationException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return ForgetAllResponse.fromJson(response.forgetAll);\n  }",
    "imports" : "import 'package:meta/meta.dart';\n\nimport '../../basic_api/generated/forget_all_receive.dart';\nimport '../../basic_api/generated/forget_receive.dart';\nimport '../../basic_api/generated/proposal_open_contract_receive.dart';\nimport '../../basic_api/generated/proposal_open_contract_send.dart';\nimport '../../basic_api/response.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/connection/call_manager/base_call_manager.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../../helpers/helpers.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';\nimport '../models/enums.dart';\nimport 'forget_all_receive_result.dart';\nimport 'forget_receive_result.dart';"
}