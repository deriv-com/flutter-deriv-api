{
    "methods" : " static final BaseAPI _api = Injector.getInjector().get<BaseAPI>();\n\n  /// Gets the information of the OAuth application specified by [appId] in [request]\n  ///\n  /// For parameters information refer to [AppGetRequest].\n  /// Throws an [AppException] if API response contains an error\n  static Future<AppGetResponse> fetchApplicationDetails(\n    AppGetSend request,\n  ) async {\n    final AppGetReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          AppException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return AppGetResponse.fromJson(response.appGet);\n  }\n\n  /// Gets all of the account's OAuth applications.\n  ///\n  /// For parameters information refer to [AppListRequest].\n  /// Throws an [AppException] if API response contains an error\n  static Future<List<AppGetResponse>> fetchApplicationList(\n    AppListSend request,\n  ) async {\n    final AppListReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          AppException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return getListFromMap(\n      response.appList,\n      itemToTypeCallback: (dynamic item) => AppGetResponse.fromJson(item),\n    );\n  }\n\n  /// Retrieves details of app markup according to criteria specified.\n  Future<AppMarkupDetailsResponse> fetchApplicationMarkupDetails({\n    String clientLoginId,\n    DateTime dateFrom,\n    DateTime dateTo,\n    bool description,\n    int limit,\n    int offset,\n    String sort,\n    List<String> sortFields,\n  }) =>\n      AppMarkupDetailsResponse.fetchApplicationMarkupDetails(\n        AppMarkupDetailsSend(\n          appId: appGet.appId,\n          clientLoginid: clientLoginId,\n          dateFrom: dateFrom.toString(),\n          dateTo: dateTo.toString(),\n          description: description,\n          limit: limit,\n          offset: offset,\n          sort: sort,\n          sortFields: sortFields,\n        ),\n      );\n\n  /// The request for deleting an application.\n  Future<AppDeleteResponse> deleteApplication() =>\n      AppDeleteResponse.deleteApplication(\n        AppDeleteSend(appDelete: appGet.appId),\n      );\n\n  /// Register a new Oauth application.\n  Future<AppRegisterResponse> registerApplication({List<TokenScope> scopes}) =>\n      AppRegisterResponse.registerApplication(\n        AppRegisterSend(\n          appMarkupPercentage: appGet.appMarkupPercentage,\n          appstore: appGet.appstore,\n          github: appGet.github,\n          googleplay: appGet.googleplay,\n          homepage: appGet.homepage,\n          name: appGet.name,\n          redirectUri: appGet.redirectUri,\n          scopes: scopes\n              .map((TokenScope scope) => getStringFromEnum(scope))\n              .toList(),\n          verificationUri: appGet.verificationUri,\n        ),\n      );\n\n  /// Update application.\n  Future<AppUpdateResponse> updateApplication({List<TokenScope> scopes}) =>\n      AppUpdateResponse.updateApplication(\n        AppUpdateSend(\n          appMarkupPercentage: appGet.appMarkupPercentage,\n          appUpdate: appGet.appId,\n          appstore: appGet.appstore,\n          github: appGet.github,\n          googleplay: appGet.googleplay,\n          homepage: appGet.homepage,\n          name: appGet.name,\n          redirectUri: appGet.redirectUri,\n          scopes: scopes\n              .map((TokenScope scope) => getStringFromEnum(scope))\n              .toList(),\n          verificationUri: appGet.verificationUri,\n        ),\n      );\n\n  /// Revoke access of particular app.\n  Future<RevokeOauthAppResponse> revokeOauthApplication() =>\n      RevokeOauthAppResponse.revokeOauthApplication(\n        RevokeOauthAppSend(revokeOauthApp: appGet.appId),\n      );\n",
    "imports" : "import 'package:meta/meta.dart';\n\nimport '../../basic_api/generated/app_delete_send.dart';\nimport '../../basic_api/generated/app_get_receive.dart';\nimport '../../basic_api/generated/app_get_send.dart';\nimport '../../basic_api/generated/app_list_receive.dart';\nimport '../../basic_api/generated/app_list_send.dart';\nimport '../../basic_api/generated/app_markup_details_send.dart';\nimport '../../basic_api/generated/app_register_send.dart';\nimport '../../basic_api/generated/app_update_send.dart';\nimport '../../basic_api/generated/revoke_oauth_app_send.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../../helpers/helpers.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/enums.dart';\nimport 'app_delete_receive_result.dart';\nimport 'app_markup_details_receive_result.dart';\nimport 'app_register_receive_result.dart';\nimport 'app_update_receive_result.dart';\nimport 'revoke_oauth_app_receive_result.dart';"
}