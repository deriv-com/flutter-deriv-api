{
  "methods": "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Gets oauth application that used for the authorized account.\n  ///\n  /// Throws an [AppException] if API response contains an error\n  static Future<OauthAppsResponse> fetchOauthApps([\n    OauthAppsRequest? request,\n  ]) async {\n    final OauthAppsReceive response = await _api.call(\n      request: request ?? const OauthAppsRequest(),\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          AppException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return OauthAppsResponse.fromJson(response.oauthApps);\n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/oauth_apps_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/oauth_apps_send.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';\n"
}
