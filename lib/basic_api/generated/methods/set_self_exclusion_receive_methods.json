{
    "methods" : " static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Sets Self-Exclusion (this call should be used in conjunction with [fetchSelfExclusion])\n  ///\n  /// For parameters information refer to [SetSelfExclusionRequest].\n  /// Throws a [SelfExclusionException] if API response contains an error\n  static Future<SetSelfExclusionResponse> setSelfExclusionMethod(\n      SetSelfExclusionRequest request) async {\n    final SetSelfExclusionReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          SelfExclusionException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return SetSelfExclusionResponse.fromJson(response.setSelfExclusion);\n  }",
    "imports" : "import '../../basic_api/generated/set_self_exclusion_receive.dart';\nimport '../../basic_api/generated/set_self_exclusion_send.dart';\nimport '../../helpers/helpers.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';"
}