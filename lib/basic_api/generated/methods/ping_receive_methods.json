{
  "methods": "static final BaseAPI _api = Injector()<BaseAPI>(); \n \n  /// Requests the ping request to the server. \n  /// \n  /// Mostly used to test the connection or to keep it alive. \n  /// Throws a [BaseAPIException] if API response contains an error. \n  static Future<PingReceive> pingMethodRaw([PingRequest? request]) async { \n    final PingReceive response = await _api.call( \n      request: request ?? const PingRequest(), \n    ); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          BaseAPIException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Requests the ping request to the server. \n  /// \n  /// Mostly used to test the connection or to keep it alive. \n  /// Throws a [BaseAPIException] if API response contains an error. \n  static Future<PingResponse> pingMethod([PingRequest? request]) async { \n    final PingReceive response = await pingMethodRaw(request); \n \n    return PingResponse.fromJson(response.ping); \n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/ping_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/ping_send.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:deriv_dependency_injector/dependency_injector.dart';\n"
}
