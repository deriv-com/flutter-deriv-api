{
  "methods": "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Gets the [TickHistory] for the given [symbol] in [request]\n  ///\n  /// Throws a [TickException] if API response contains an error\n  static Future<TicksHistoryResponse> fetchTickHistory(\n    TicksHistoryRequest request,\n  ) async {\n    final TicksHistoryReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          TickException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return TicksHistoryResponse.fromJson(response.candles, response.history,\n        response.pipSize, response.subscription);\n  }\n\n  /// Gets ticks history and its stream\n  ///\n  /// Throws [TickException] if API response contains an error\n  static Future<TickHistorySubscription?> fetchTicksAndSubscribe(\n    TicksHistoryRequest request, {\n    RequestCompareFunction? comparePredicate,\n    bool subscribe = true,\n  }) async {\n    if (subscribe) {\n      final Stream<Response>? responseStream =\n          _api.subscribe(request: request, comparePredicate: comparePredicate);\n      final Response? firstResponse = await responseStream?.first;\n\n      checkException(\n        response: firstResponse,\n        exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n            TickException(baseExceptionModel: baseExceptionModel),\n      );\n      if (firstResponse is TicksHistoryReceive) {\n        return TickHistorySubscription(\n          tickHistory: TicksHistoryResponse.fromJson(\n              firstResponse.candles,\n              firstResponse.history,\n              firstResponse.pipSize,\n              firstResponse.subscription),\n          tickStream: responseStream?.map<TickBase?>(\n            (Response response) {\n              checkException(\n                response: response,\n                exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n                    TickException(baseExceptionModel: baseExceptionModel),\n              );\n\n              return response is TicksReceive\n                  ? Tick.fromJson(\n                      response.tick!,\n                      subscriptionJson: response.subscription,\n                    )\n                  : response is OHLCResponse\n                      ? OHLC.fromJson(\n                          response.ohlc!,\n                          subscriptionJson: response.subscription,\n                        )\n                      : null;\n            },\n          ),\n        );\n      }\n      return null;\n    } else {\n      return TickHistorySubscription(\n        tickHistory: await fetchTickHistory(request),\n      );\n    }\n  }",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/manually/ohlc_response.dart';\nimport 'package:flutter_deriv_api/api/manually/ohlc_response_result.dart';\nimport 'package:flutter_deriv_api/api/manually/tick.dart';\nimport 'package:flutter_deriv_api/api/manually/tick_base.dart';\nimport 'package:flutter_deriv_api/api/manually/tick_history_subscription.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/ticks_history_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/ticks_history_send.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/ticks_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/response.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/connection/call_manager/base_call_manager.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';\n"
}
