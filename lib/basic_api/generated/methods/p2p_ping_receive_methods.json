{
  "methods": "static final BaseAPI _api = Injector()<BaseAPI>(); \n \n  /// Requests the p2p ping request to the server. \n  /// \n  /// Mostly used to test the connection or to keep it alive. \n  /// Throws a [APIBaseException] if API response contains an error. \n  static Future<P2pPingReceive> p2pPingMethodRaw([ \n    P2pPingRequest? request, \n  ]) async { \n    final P2pPingReceive response = await _api.call( \n      request: request ?? const P2pPingRequest(), \n    ); \n \n    checkException( \n      response: response, \n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) => \n          APIBaseException(baseExceptionModel: baseExceptionModel), \n    ); \n \n    return response; \n  } \n \n  /// Requests the p2p ping request to the server. \n  /// \n  /// Mostly used to test the connection or to keep it alive. \n  /// Throws a [APIBaseException] if API response contains an error. \n  static Future<P2pPingResponse> p2pPingMethod([ \n    P2pPingRequest? request, \n  ]) async { \n    final P2pPingReceive response = await p2pPingMethodRaw(request); \n \n    return P2pPingResponse.fromJson(response.p2pPing); \n  }",
  "imports": "import 'package:deriv_dependency_injector/dependency_injector.dart'; \nimport 'package:flutter_deriv_api/api/exceptions/exceptions.dart'; \nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart'; \nimport 'package:flutter_deriv_api/basic_api/generated/p2p_ping_receive.dart'; \nimport 'package:flutter_deriv_api/basic_api/generated/p2p_ping_send.dart'; \n \nimport 'package:flutter_deriv_api/helpers/helpers.dart'; \nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\n"
}
