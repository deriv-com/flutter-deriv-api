{
    "methods": "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Allows users to exclude themselves from the website for certain periods of time,\n  /// or to set limits on their trading activities.\n  ///\n  /// This facility is a regulatory requirement for certain Landing Companies.\n  /// For parameters information refer to [GetSelfExclusionRequest].\n  /// Throws a [SelfExclusionException] if API response contains an error\n  static Future<GetSelfExclusionResponse> fetchSelfExclusion([\n    GetSelfExclusionRequest? request,\n  ]) async {\n    final GetSelfExclusionReceive response = await _api.call(\n      request: request ?? const GetSelfExclusionRequest(),\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          SelfExclusionException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return GetSelfExclusionResponse.fromJson(response.getSelfExclusion);\n  }\n\n  /// Sets Self-Exclusion (this call should be used in conjunction with [fetchSelfExclusion])\n  ///\n  /// For parameters information refer to [SetSelfExclusionRequest].\n  /// Throws a [SelfExclusionException] if API response contains an error\n  static Future<bool?> setSelfExclusion(SetSelfExclusionRequest request) async {\n    final SetSelfExclusionReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          SelfExclusionException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return getBool(response.setSelfExclusion);\n  }\n\n  /// Excludes user from the website based this parameters\n  ///\n  /// (this call should be used in conjunction with [fetchSelfExclusion])\n  /// Throws a [SelfExclusionException] if API response contains an error\n  Future<bool?> exclude() async {\n    final SetSelfExclusionReceive response = await _api.call(\n      request: SetSelfExclusionRequest(\n        excludeUntil: getSelfExclusion?.excludeUntil,\n        max30dayDeposit: getSelfExclusion?.max30dayDeposit,\n        max30dayLosses: getSelfExclusion?.max30dayLosses,\n        max30dayTurnover: getSelfExclusion?.max30dayTurnover,\n        max7dayDeposit: getSelfExclusion?.max7dayDeposit,\n        max7dayLosses: getSelfExclusion?.max7dayLosses,\n        max7dayTurnover: getSelfExclusion?.max7dayTurnover,\n        maxBalance: getSelfExclusion?.maxBalance,\n        maxDeposit: getSelfExclusion?.maxDeposit,\n        maxLosses: getSelfExclusion?.maxLosses,\n        maxOpenBets: getSelfExclusion?.maxOpenBets,\n        maxTurnover: getSelfExclusion?.maxTurnover,\n        sessionDurationLimit: getSelfExclusion?.sessionDurationLimit,\n        timeoutUntil:\n            getSecondsSinceEpochDateTime(getSelfExclusion?.timeoutUntil),\n      ),\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          SelfExclusionException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return getBool(response.setSelfExclusion);\n  }",
    "imports": "import '../../basic_api/generated/get_self_exclusion_receive.dart';\nimport '../../basic_api/generated/get_self_exclusion_send.dart';\nimport '../../basic_api/generated/set_self_exclusion_receive.dart';\nimport '../../basic_api/generated/set_self_exclusion_send.dart';\nimport '../../helpers/helpers.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';"
}