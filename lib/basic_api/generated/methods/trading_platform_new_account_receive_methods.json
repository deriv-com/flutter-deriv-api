{
  "methods": "static final BaseAPI _api = Injector()<BaseAPI>();\n\n    /// Trading Platform: New Account (request).\n  ///\n  /// This call creates new Trading account, either demo or real money.\n  /// For parameters information refer to [TradingPlatformNewAccountRequest].\n  /// Throws a [TradingPlatformException] if API response contains an error.\n  static Future<TradingPlatformNewAccountResponse> create(\n    TradingPlatformNewAccountRequest request,\n  ) async {\n    final TradingPlatformNewAccountReceive response =\n        await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          TradingPlatformException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return TradingPlatformNewAccountResponse.fromJson(\n        response.tradingPlatformNewAccount,\n    );\n}",
  "imports": "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/api.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:deriv_dependency_injector/dependency_injector.dart';\n"
}
