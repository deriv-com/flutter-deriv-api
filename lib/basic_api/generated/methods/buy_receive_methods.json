{
  "methods" : "  static final BaseAPI _api = Injector.getInjector().get<BaseAPI>()!;\n\n  /// Buys a contract with parameters specified in given [BuyRequest]\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  static Future<BuyResponse> buyMethod(BuyRequest request) async {\n    final BuyReceive response = await _api.call(\n      request: request,\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n          ContractOperationException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return BuyResponse.fromJson(response.buy, response.subscription);\n  }\n\n  /// Buys contract with parameters specified in request and subscribes to it.\n  ///\n  /// Throws a [ContractOperationException] is API response contains an error\n  static Stream<ProposalOpenContractResponse?> buyAndSubscribe(\n    BuyRequest request, {\n    RequestCompareFunction? comparePredicate,\n  }) =>\n      _api\n          .subscribe(request: request, comparePredicate: comparePredicate)!\n          .map<ProposalOpenContractResponse?>(\n        (Response response) {\n          checkException(\n            response: response,\n            exceptionCreator: ({BaseExceptionModel? baseExceptionModel}) =>\n                ContractOperationException(\n                    baseExceptionModel: baseExceptionModel),\n          );\n          return response is ProposalOpenContractReceive\n              ? ProposalOpenContractResponse.fromJson(\n                  response.proposalOpenContract,\n                  response.subscription,\n                )\n              : null;\n        },\n      );\n\n  /// Gets the current spot of the this bought contract as [Contract].\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  Future<ProposalOpenContractResponse> fetchState() =>\n      ProposalOpenContractResponse.fetchContractState(\n        ProposalOpenContractRequest(\n          contractId: buy?.contractId,\n        ),\n      );\n\n  /// Subscribes to this bought contract spot and returns its spot update as [ContractBaseModel].\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  Stream<ProposalOpenContractResponse?> subscribeState({\n    RequestCompareFunction? comparePredicate,\n  }) =>\n      ProposalOpenContractResponse.subscribeContractState(\n        ProposalOpenContractRequest(contractId: buy?.contractId),\n        comparePredicate: comparePredicate,\n      );\n\n  /// Sells this contract.\n  ///\n  /// [price] is the Minimum price at which to sell the contract,\n  /// Default be 0 for 'sell at market'.\n  /// Throws a [ContractOperationException] if API response contains an error\n  Future<SellResponse> sell({double price = 0}) =>\n      SellResponse.sellContract(SellRequest(sell: buy?.contractId, price: price));\n\n  /// Cancels this contract\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  Future<CancelResponse> cancel() =>\n      CancelResponse.cancelContract(CancelRequest(cancel: buy?.contractId));\n\n  /// Updates this contract\n  ///\n  /// New [stopLoss] value for a contract. To cancel, pass null.\n  /// New [takeProfit] value for a contract. To cancel, pass null.\n  /// Throws a [ContractOperationException] if API response contains an error\n  Future<ContractUpdateResponse> update({\n    double? stopLoss,\n    double? takeProfit,\n  }) =>\n      ContractUpdateResponse.updateContract(ContractUpdateRequest(\n        contractId: buy?.contractId,\n        limitOrder: <String, dynamic>{\n          'stop_loss': stopLoss,\n          'take_profit': takeProfit,\n        },\n      ));",
  "imports" : "import 'package:flutter_deriv_api/api/exceptions/exceptions.dart';\nimport 'package:flutter_deriv_api/api/models/base_exception_model.dart';\nimport 'package:flutter_deriv_api/api/response/cancel_receive_result.dart';\nimport 'package:flutter_deriv_api/api/response/contract_update_receive_result.dart';\nimport 'package:flutter_deriv_api/api/response/proposal_open_contract_receive_result.dart';\nimport 'package:flutter_deriv_api/api/response/sell_receive_result.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/buy_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/buy_send.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/cancel_send.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/contract_update_send.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/proposal_open_contract_receive.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/proposal_open_contract_send.dart';\nimport 'package:flutter_deriv_api/basic_api/generated/sell_send.dart';\nimport 'package:flutter_deriv_api/basic_api/response.dart';\nimport 'package:flutter_deriv_api/helpers/helpers.dart';\nimport 'package:flutter_deriv_api/services/connection/api_manager/base_api.dart';\nimport 'package:flutter_deriv_api/services/connection/call_manager/base_call_manager.dart';\nimport 'package:flutter_deriv_api/services/dependency_injector/injector.dart';"
}