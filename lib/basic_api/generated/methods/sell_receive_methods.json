{
    "methods" : "static final BaseAPI _api = Injector.getInjector().get<BaseAPI>();\n\n  /// Sells a contract with parameters specified in [SellRequest].\n  ///\n  /// Throws a [ContractOperationException] if API response contains an error\n  static Future<SellResponse> sellContract(SellSend request) async {\n    final SellReceive response = await _api.call(request: request);\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          ContractOperationException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return SellResponse.fromJson(response.sell);\n  }\n\n  /// tries to sell any expired contracts and returns the number of sold contracts as [SellExpiredContractModel].\n  ///\n  /// Throws [ContractOperationException] if API response contains an error\n  static Future<SellExpiredResponse> sellExpiredContracts([\n    SellExpiredSend request,\n  ]) async {\n    final SellExpiredReceive response = await _api.call(\n      request: request ?? const SellExpiredSend(),\n    );\n\n    checkException(\n      response: response,\n      exceptionCreator: ({BaseExceptionModel baseExceptionModel}) =>\n          ContractOperationException(baseExceptionModel: baseExceptionModel),\n    );\n\n    return SellExpiredResponse.fromJson(response.sellExpired);\n  }",
    "imports" : "\nimport 'package:meta/meta.dart';\n\nimport '../../basic_api/generated/sell_expired_receive.dart';\nimport '../../basic_api/generated/sell_expired_send.dart';\nimport '../../basic_api/generated/sell_receive.dart';\nimport '../../basic_api/generated/sell_send.dart';\nimport '../../services/connection/api_manager/base_api.dart';\nimport '../../services/dependency_injector/injector.dart';\nimport '../../helpers/helpers.dart';\nimport '../exceptions/exceptions.dart';\nimport '../models/base_exception_model.dart';\nimport 'sell_expired_receive_result.dart';"
}